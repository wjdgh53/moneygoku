// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Strategy defines trading logic and parameters
model Strategy {
  id              String   @id @default(cuid())
  name            String
  description     String?
  timeHorizon     TimeHorizon   @default(SWING)      // 투자 기간
  riskAppetite    RiskAppetite  @default(BALANCED)   // 리스크 성향
  entryConditions Json     // Indicators and conditions for entry
  exitConditions  Json     // Indicators and conditions for exit
  stopLoss        Float    @default(5.0)    // 5% 손절
  takeProfit      Float    @default(10.0)   // 10% 익절
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  bots            Bot[]
  backtests       BacktestRun[]

  @@map("strategies")
}

// Bot represents strategy + symbol combination
model Bot {
  id             String   @id @default(cuid())
  strategyId     String
  name           String
  symbol         String
  underlyingAsset String?  // 레버리지 ETF의 기초 자산 (예: BITX → BTC)
  extendedHours  Boolean  @default(false)  // 시간외 거래 활성화 (pre-market, after-hours)
  status         BotStatus @default(STOPPED) // ACTIVE, PAUSED, STOPPED, ERROR
  mode           TradingMode @default(PAPER)  // PAPER만 지원
  orderType      String   @default("MARKET")  // MARKET, LIMIT
  fundAllocation Float    @default(1000.0)   // 할당 자금
  totalReturns   Float    @default(0.0)      // 총 수익 (실현 손익)
  realizedCash   Float    @default(0.0)      // 매도로 회수한 현금
  winRate        Float    @default(0.0)      // 승률 %
  totalTrades    Int      @default(0)        // 총 거래 수
  lastExecutedAt DateTime?
  analystRating  String?  // JSON: 애널리스트 레이팅 데이터 (FMP)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  strategy       Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  trades         Trade[]
  reports        Report[]
  positions      Position[] // 봇별 포지션

  @@index([strategyId])
  @@index([symbol])
  @@index([status])
  @@map("bots")
}

// Trade represents individual buy/sell transactions
model Trade {
  id            String      @id @default(cuid())
  botId         String
  symbol        String
  side          TradeSide   // BUY or SELL
  quantity      Float
  price         Float
  total         Float       // quantity * price
  status        TradeStatus @default(EXECUTED) // EXECUTED, FAILED
  reason        String?     // "RSI < 30" (거래 이유)
  alpacaOrderId String?     // Alpaca Order ID for tracking fill status
  executedAt    DateTime    @default(now())
  createdAt     DateTime    @default(now())

  // Relationships
  bot           Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([symbol])
  @@index([executedAt])
  @@map("trades")
}

// Portfolio represents global portfolio state
model Portfolio {
  id                  String   @id @default(cuid())
  totalCash           Float    @default(10000.0)  // 전체 현금
  totalValue          Float    @default(10000.0)  // 전체 자산 가치
  totalReturns        Float    @default(0.0)      // 전체 수익
  totalReturnsPercent Float    @default(0.0)      // 전체 수익률
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  @@map("portfolios")
}

// Position represents bot-specific symbol holdings
model Position {
  id            String   @id @default(cuid())
  botId         String   // 봇별 포지션 관리
  symbol        String   // 종목 심볼
  quantity      Float    // 현재 보유 수량
  avgEntryPrice Float    // 평균 진입가
  totalCost     Float    // 총 투자금 (quantity * avgEntryPrice)
  marketValue   Float    @default(0.0) // 현재 시장가치 (quantity * currentPrice)
  unrealizedPL  Float    @default(0.0) // 미실현 손익 (marketValue - totalCost)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  // Relationships
  bot           Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, symbol]) // 봇당 종목당 하나의 포지션만
  @@map("positions")
}

// MarketData stores market price information cache (Enhanced for backtesting)
model MarketData {
  id        String   @id @default(cuid())

  // Identification
  symbol    String
  interval  String   @default("daily") // "1min", "5min", "15min", "60min", "daily"
  timestamp DateTime // Bar start time (UTC)

  // OHLCV data
  open      Float    // 시가
  high      Float    // 고가
  low       Float    // 저가
  close     Float    // 종가
  volume    Float    // 거래량

  // Data quality flags (for backtesting)
  isValidated Boolean  @default(false)  // Passed validation checks
  hasGap      Boolean  @default(false)  // Gap detected before this bar
  isAnomaly   Boolean  @default(false)  // Flagged as anomalous (spike, zero volume)

  // Metadata
  source    String   @default("ALPHA_VANTAGE")
  fetchedAt DateTime @default(now())   // When data was fetched from API
  createdAt DateTime @default(now())

  @@unique([symbol, interval, timestamp])
  @@index([symbol, interval])
  @@index([timestamp])
  @@index([isValidated])
  @@map("market_data")
}

// WatchList stores symbols to track for market data
model WatchList {
  id       String   @id @default(cuid())
  symbol   String   @unique  // "AAPL"
  name     String             // "Apple Inc."
  isActive Boolean  @default(true)
  addedAt  DateTime @default(now())

  @@map("watchlist")
}

// BotRecommendationReport stores AI-generated bot recommendations
model BotRecommendationReport {
  id                  String   @id @default(cuid())
  recommendations     String   // JSON stringified: BotRecommendation[]
  analysisNotes       String?  // AI analysis notes
  totalOpportunities  Int      // Number of opportunities analyzed
  filteredOTCCount    Int      @default(0)  // Number of OTC stocks filtered
  highConfidenceCount Int      // Number of high confidence recommendations
  timestamp           DateTime @default(now())
  createdAt           DateTime @default(now())

  @@index([timestamp])
  @@map("bot_recommendation_reports")
}

// Report represents bot test analysis results
model Report {
  id             String    @id @default(cuid())
  botId          String
  bot            Bot       @relation(fields: [botId], references: [id], onDelete: Cascade)

  // 기본 정보
  symbol         String
  currentPrice   Float
  executionTime  Int       // ms
  timestamp      DateTime  @default(now())

  // 목표가 정보
  targetPrice       Float?
  stopLossPrice     Float?
  takeProfitPercent Float?
  stopLossPercent   Float?

  // 뉴스 분석
  newsArticles   String?   // JSON stringified
  newsSummary    String?
  newsSentiment  Float?
  sentimentLabel String?

  // 🆕 FMP 파싱 데이터 (요약)
  fmpParsedData  String?   // JSON stringified: ParsedFMPData

  // 🆕 백테스팅용 점수 상세 데이터
  technicalScore      Float?    // 기술 지표 점수 (0.5 or -0.5)
  baseScore           Float?    // 객관적 기초 점수 (뉴스 70% + 기술 30%)
  gptAdjustment       Float?    // GPT 조정값 (±0.5)
  finalScore          Float?    // 최종 점수 (baseScore + gptAdjustment)
  objectiveReasoning  String?   // 객관적 분석 설명
  aiReasoning         String?   // AI 판단 설명

  // AI 결정
  aiAction       String?   // BUY, SELL, HOLD
  aiReason       String?   // Deprecated - use aiReasoning
  aiLimitPrice   Float?
  aiQuantity     Int?

  // 최종 결정
  decision       String    // BUY, SELL, HOLD
  decisionReason String

  // 거래 실행 결과
  tradeExecuted  Boolean   @default(false)
  tradeSuccess   Boolean?
  tradeOrderId   String?
  tradeMessage   String?
  tradeError     String?

  // 전략 파라미터 스냅샷
  strategyParams String    // JSON stringified

  // API 호출 내역
  apiCalls       String    // JSON stringified

  // 조건 평가 결과
  conditions     String    // JSON stringified

  // 오류
  error          String?

  createdAt      DateTime  @default(now())

  @@index([botId])
  @@index([timestamp])
  @@map("reports")
}

// ==================================================
// BACKTESTING SYSTEM MODELS
// ==================================================

// MarketDataStatus tracks completeness of historical data for backtesting
model MarketDataStatus {
  id              String   @id @default(cuid())
  symbol          String
  interval        String   // "daily", "1min", "5min", etc.
  startDate       DateTime // Earliest available bar
  endDate         DateTime // Latest available bar
  totalBars       Int      @default(0)
  missingBars     Int      @default(0)
  completeness    Float    @default(0.0) // Percentage (0-100)
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  @@unique([symbol, interval])
  @@index([symbol])
  @@map("market_data_status")
}

// AlphaVantageApiLog tracks API usage for rate limiting
model AlphaVantageApiLog {
  id              String   @id @default(cuid())
  endpoint        String   // "TIME_SERIES_INTRADAY", "TIME_SERIES_DAILY", etc.
  symbol          String
  interval        String?  // For intraday calls
  status          String   // "SUCCESS", "RATE_LIMITED", "ERROR"
  responseTime    Int      // milliseconds
  errorMessage    String?
  timestamp       DateTime @default(now())

  @@index([timestamp])
  @@index([status])
  @@map("alphavantage_api_logs")
}

// BacktestRun represents a single backtest execution
model BacktestRun {
  id              String   @id @default(cuid())

  // Configuration
  strategyId      String
  strategy        Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  symbol          String
  timeHorizon     TimeHorizon

  // Time range
  startDate       DateTime  // Backtest period start (e.g., 2023-01-01)
  endDate         DateTime  // Backtest period end (e.g., 2025-01-01)

  // Initial parameters
  initialCash     Float     @default(10000.0)
  positionSizing  String    @default("FIXED_DOLLAR")  // FIXED_DOLLAR, FIXED_SHARES, PERCENT_EQUITY
  positionSize    Float     @default(1000.0)          // $1000 per trade

  // Execution parameters
  slippageModel   String    @default("PERCENTAGE")     // PERCENTAGE, FIXED_DOLLAR
  slippageBps     Int       @default(10)               // 10 basis points = 0.1%
  commissionPerTrade Float  @default(1.0)              // $1 per trade

  // Results (calculated after backtest)
  totalTrades     Int       @default(0)
  winningTrades   Int       @default(0)
  losingTrades    Int       @default(0)
  winRate         Float     @default(0.0)              // Percentage

  finalCash       Float?
  finalEquity     Float?
  totalReturn     Float?                               // Dollar amount
  totalReturnPct  Float?                               // Percentage

  // Risk metrics
  sharpeRatio     Float?
  sortinoRatio    Float?
  maxDrawdown     Float?                               // Percentage
  maxDrawdownDate DateTime?

  // Additional metrics
  avgWinPct       Float?                               // Average winning trade %
  avgLossPct      Float?                               // Average losing trade %
  profitFactor    Float?                               // Gross profit / Gross loss
  expectancy      Float?                               // Average $ per trade

  // Metadata
  status          BacktestStatus @default(PENDING)     // PENDING, RUNNING, COMPLETED, FAILED
  errorMessage    String?
  executionTime   Int?                                 // milliseconds
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  trades          BacktestTrade[]
  positions       BacktestPosition[]
  equityCurve     BacktestEquityCurve[]
  alerts          BacktestAlert[]

  @@index([strategyId])
  @@index([symbol])
  @@index([status])
  @@index([createdAt])
  @@map("backtest_runs")
}

// BacktestTrade records individual trade executions during backtest
model BacktestTrade {
  id              String   @id @default(cuid())
  backtestRunId   String
  backtestRun     BacktestRun @relation(fields: [backtestRunId], references: [id], onDelete: Cascade)

  // Trade details
  symbol          String
  side            TradeSide        // BUY or SELL
  quantity        Float

  // Pricing
  targetPrice     Float            // Signal price (close of bar)
  executedPrice   Float            // Actual execution price (with slippage)
  slippage        Float            // Dollar amount of slippage
  commission      Float            // Commission paid

  // Trade economics
  grossAmount     Float            // quantity * executedPrice
  netAmount       Float            // grossAmount ± slippage ± commission

  // Timing
  signalBar       DateTime         // Bar that generated the signal
  executionBar    DateTime         // Bar on which order was filled

  // Performance (for SELL orders only)
  entryPrice      Float?           // Average entry price of position
  realizedPL      Float?           // Realized P&L for this trade
  realizedPLPct   Float?           // Realized P&L percentage
  holdingPeriod   Int?             // Number of bars held

  // Signal metadata (from Report scoring system)
  entryReason     String?          // Entry signal description
  exitReason      String?          // Exit signal description
  technicalScore  Float?           // Technical indicator score at entry
  newsScore       Float?           // News sentiment score at entry
  aiScore         Float?           // GPT adjustment score
  finalScore      Float?           // Combined score

  // Metadata
  createdAt       DateTime @default(now())

  @@index([backtestRunId])
  @@index([signalBar])
  @@map("backtest_trades")
}

// BacktestPosition tracks open positions during backtest
model BacktestPosition {
  id              String   @id @default(cuid())
  backtestRunId   String
  backtestRun     BacktestRun @relation(fields: [backtestRunId], references: [id], onDelete: Cascade)

  // Position details
  symbol          String
  quantity        Float
  avgEntryPrice   Float
  totalCost       Float            // Total invested (including commissions)

  // Current state (updated on each bar)
  currentPrice    Float            // Latest bar close
  marketValue     Float            // quantity * currentPrice
  unrealizedPL    Float            // marketValue - totalCost
  unrealizedPLPct Float            // (unrealizedPL / totalCost) * 100

  // Timing
  entryBar        DateTime         // First buy bar
  lastUpdateBar   DateTime         // Last price update bar

  // Risk management
  highWaterMark   Float            // Highest unrealized P&L ever reached
  maxDrawdownPct  Float            // Worst drawdown from high water mark

  // Status
  isOpen          Boolean  @default(true)
  closedAt        DateTime?
  exitBar         DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([backtestRunId, symbol, isOpen])  // Only one open position per symbol
  @@index([backtestRunId])
  @@map("backtest_positions")
}

// BacktestEquityCurve records portfolio value snapshots at each bar
model BacktestEquityCurve {
  id              String   @id @default(cuid())
  backtestRunId   String
  backtestRun     BacktestRun @relation(fields: [backtestRunId], references: [id], onDelete: Cascade)

  // Snapshot at each bar
  timestamp       DateTime         // Bar timestamp

  // Portfolio state
  cash            Float            // Available cash
  stockValue      Float            // Market value of positions
  totalEquity     Float            // cash + stockValue

  // Running metrics
  cumulativeReturn Float           // (totalEquity - initialCash) / initialCash
  drawdown        Float            // Current drawdown from peak (%)

  // Trade count
  tradeCount      Int              // Total trades executed so far

  @@unique([backtestRunId, timestamp])
  @@index([backtestRunId])
  @@index([timestamp])
  @@map("backtest_equity_curve")
}

// BacktestAlert records performance degradation alerts
model BacktestAlert {
  id            String   @id @default(cuid())

  backtestRunId String
  backtestRun   BacktestRun @relation(fields: [backtestRunId], references: [id], onDelete: Cascade)

  // Alert details
  alertType     String   // WIN_RATE_DROP, MAX_DRAWDOWN_BREACH, SHARPE_DECLINE
  severity      String   // LOW, MEDIUM, HIGH
  message       String
  threshold     Float?   // Threshold value that triggered alert

  // Metadata
  dismissed     Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@index([backtestRunId])
  @@index([dismissed])
  @@map("backtest_alerts")
}

// ==================================================
// END BACKTESTING SYSTEM MODELS
// ==================================================


// Enums
enum BotStatus {
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

enum TradingMode {
  PAPER
}

enum TradeSide {
  BUY
  SELL
}

enum TradeStatus {
  EXECUTED
  FAILED
}

enum TimeHorizon {
  SHORT_TERM  // Day Trading
  SWING       // Swing Trading
  LONG_TERM   // Position Trading
}

enum RiskAppetite {
  DEFENSIVE   // Conservative
  BALANCED    // Moderate
  AGGRESSIVE  // Aggressive
}

enum BacktestStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
